package handlers

import (
	"context"
	"fmt"
	"strings"
	"time"

	"chatops/internal/monitoring"

	telebot "gopkg.in/telebot.v3"
)

func AlertsHandler(c telebot.Context) error {
	ctx, cancel := context.WithTimeout(context.Background(), 20*time.Second)
	defer cancel()

	message, err := GenerateAlertsMessage(ctx, GlobalMonitorClient)
	if err != nil {
		if ctx.Err() == context.DeadlineExceeded {
			return c.Send("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ (timeout)")
		}
		return c.Send(fmt.Sprintf("‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:*\n`%v`", escapeMarkdown(err.Error())), telebot.ModeMarkdownV2)
	}

	return c.Send(message, telebot.ModeMarkdownV2)
}

// GenerateAlertsMessage –ø–æ–ª—É—á–∞–µ—Ç –∞–ª–µ—Ä—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –∏ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç telebot.
func GenerateAlertsMessage(ctx context.Context, client *monitoring.Client) (string, error) {
	alerts, err := client.GetActiveAlerts(ctx)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: %w", err)
	}

	var sb strings.Builder
	sb.WriteString("üîç *–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤:*\n\n")

	if len(alerts) > 0 {
		sb.WriteString("üî• *–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:*\n")
		for _, alert := range alerts {
			sb.WriteString(fmt.Sprintf("> *%s*\n", escapeMarkdown(alert.Labels["alertname"])))
			if desc, ok := alert.Annotations["description"]; ok {
				sb.WriteString(fmt.Sprintf("  _%s_\n", escapeMarkdown(desc)))
			}
			if severity, ok := alert.Labels["severity"]; ok {
				sb.WriteString(fmt.Sprintf("  Severity: `%s`\n", escapeMarkdown(severity)))
			}
			sb.WriteString("\n")
		}
	} else {
		sb.WriteString("‚úÖ *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤*\n")
	}

	return sb.String(), nil
}
