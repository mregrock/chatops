package app

import (
	"context"
	"fmt"
	"hackaton/internal/monitoring"
	"log"
	"strings"

	"db/models"
)

// MonitoringClient –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–µ–Ω Alerter'—É –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
type MonitoringClient interface {
	GetActiveAlerts(ctx context.Context) ([]monitoring.Alert, error)
}

// DutyFinder –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–∂—É—Ä–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ë–î).
// –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–º –ª–µ–≥–∫–æ –ø–æ–¥–º–µ–Ω—è—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ë–î –Ω–∞ –º–æ–∫ –≤ —é–Ω–∏—Ç-—Ç–µ—Å—Ç–∞—Ö.
type DutyFinder interface {
	GetDutyUsersByLabel(label string) ([]models.User, error)
}

// Alerter –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–ª–µ—Ä—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –¥–µ–∂—É—Ä–Ω—ã—Ö.
type Alerter struct {
	monClient MonitoringClient
	db        DutyFinder
}

// NewAlerter —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Alerter.
func NewAlerter(monClient MonitoringClient, db DutyFinder) *Alerter {
	return &Alerter{
		monClient: monClient,
		db:        db,
	}
}

// CheckAndNotify –ø–æ–ª—É—á–∞–µ—Ç –∞–ª–µ—Ä—Ç—ã, –Ω–∞—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤ –ë–î –∏ "–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç" —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
func (a *Alerter) CheckAndNotify(ctx context.Context) error {
	log.Println("Checking for active alerts...")

	alerts, err := a.monClient.GetActiveAlerts(ctx)
	if err != nil {
		return fmt.Errorf("failed to get active alerts: %w", err)
	}

	if len(alerts) == 0 {
		log.Println("No active alerts found.")
		return nil
	}

	log.Printf("Found %d active alerts. Processing...\n", len(alerts))

	for _, alert := range alerts {
		var dutyUsers []models.User
		var err error

		// –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–µ–∂—É—Ä–Ω—ã—Ö –ø–æ –º–µ—Ç–∫–∞–º –∏–∑ –∞–ª–µ—Ä—Ç–∞.
		for key, value := range alert.Labels {
			labelToSearch := fmt.Sprintf("%s=%s", key, value)
			// –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–ê–® –ò–ù–¢–ï–†–§–ï–ô–°!
			dutyUsers, err = a.db.GetDutyUsersByLabel(labelToSearch)
			if err != nil {
				log.Printf("Error searching duty users for label %s: %v", labelToSearch, err)
				continue
			}
			if len(dutyUsers) > 0 {
				log.Printf("Found %d duty users for label '%s'", len(dutyUsers), labelToSearch)
				break
			}
		}

		if len(dutyUsers) == 0 {
			log.Printf("No duty users found for alert with labels: %v. Skipping.", alert.Labels)
			continue
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º –∏ "–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º" —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –¥–µ–∂—É—Ä–Ω–æ–º—É.
		for _, user := range dutyUsers {
			notification := formatNotification(user.Login, alert)
			log.Println(notification)
		}
	}
	return nil
}
func formatNotification(dutyPersonUsername string, alert monitoring.Alert) string {
	var details []string
	for key, value := range alert.Labels {
		details = append(details, fmt.Sprintf("- %s: %s", key, value))
	}
	labelsFormatted := strings.Join(details, "\n")

	summary := alert.Annotations["summary"]
	description := alert.Annotations["description"]

	return fmt.Sprintf(
		"–£–í–ï–î–û–ú–õ–ï–ù–ò–ï –î–õ–Ø: @%s\n"+
			"==================================\n"+
			"üö® –°—Ä–∞–±–æ—Ç–∞–ª –∞–ª–µ—Ä—Ç: %s\n\n"+
			"üìã –û–ø–∏—Å–∞–Ω–∏–µ: %s\n"+
			"üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: %s\n\n"+
			"üè∑ –ú–µ—Ç–∫–∏:\n"+
			"%s\n"+
			"==================================",
		dutyPersonUsername,
		alert.Labels["alertname"],
		summary,
		description,
		labelsFormatted,
	)
}
