package kube

import (
	"context"
	"fmt"
	"sort"
	"strconv"
	"strings"
	"time"

	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/wait"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/tools/clientcmd"
)

// RevisionInfo —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ä–µ–≤–∏–∑–∏–∏ –¥–ª—è –æ—Ç–∫–∞—Ç–∞
type RevisionInfo struct {
	Revision int64
	RSName   string
	Image    string
}

// PodLogsOptions —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –ø–æ–¥–∞
type PodLogsOptions struct {
	// Previous –ø–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	Previous bool
	// TailLines –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤
	TailLines int64
	// SinceSeconds –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ª–æ–≥–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
	SinceSeconds int64
	// Timestamps –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∫ –ª–æ–≥–∞–º
	Timestamps bool
}

type K8sClientInterface interface {
	GetPodStatus(ctx context.Context, namespace, podName string) (string, error)
	ScaleDeploymentWithLogs(ctx context.Context, namespace, name string, replicas int32, logCh chan<- string) error
	RollbackDeploymentWithLogs(ctx context.Context, namespace, name string, revision int64, logCh chan<- string) error
	RestartDeploymentWithLogs(ctx context.Context, namespace, name string, logCh chan<- string) error
	ListAvailableRevisions(ctx context.Context, namespace, deploymentName string) ([]RevisionInfo, error)
	GetClientset() kubernetes.Interface
	GetPodLogs(ctx context.Context, namespace, podName string, opts *PodLogsOptions) (string, error)
}

type K8sClient struct {
	clientset kubernetes.Interface
}

// NewTestClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
func NewTestClient(clientset kubernetes.Interface) *K8sClient {
	return &K8sClient{clientset: clientset}
}

// InitClientFromKubeconfig –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç client-go –∏–∑ kubeconfig
func InitClientFromKubeconfig(path string) (*K8sClient, error) {
	config, err := clientcmd.BuildConfigFromFlags("", path)
	if err != nil {
		return nil, err
	}

	return initClient(config)
}

// InitInCluster –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç client-go –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞
func InitInCluster() (*K8sClient, error) {
	config, err := rest.InClusterConfig()
	if err != nil {
		return nil, err
	}

	return initClient(config)
}

func initClient(config *rest.Config) (*K8sClient, error) {
	cs, err := kubernetes.NewForConfig(config)
	if err != nil {
		return nil, err
	}
	return &K8sClient{clientset: cs}, nil
}

func (c *K8sClient) GetPodStatus(ctx context.Context, namespace, podName string) (string, error) {
	pod, err := c.clientset.CoreV1().Pods(namespace).Get(ctx, podName, metav1.GetOptions{})
	if err != nil {
		return "", err
	}
	return string(pod.Status.Phase), nil
}

/*func ScaleDeployment(namespace, name string, replicas int32) error {
	dep, err := clientset.AppsV1().Deployments(namespace).Get(context.TODO(), name, metav1.GetOptions{})
	if err != nil {
		return err
	}

	dep.Spec.Replicas = &replicas
	_, err = clientset.AppsV1().Deployments(namespace).Update(context.TODO(), dep, metav1.UpdateOptions{})
	return err
}*/

func (c *K8sClient) ScaleDeploymentWithLogs(ctx context.Context, namespace, name string, replicas int32, logCh chan<- string) error {
	if c.clientset == nil {
		return fmt.Errorf("client not initialized")
	}

	log := func(msg string) {
		if logCh != nil {
			logCh <- msg
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º Deployment
	dep, err := c.clientset.AppsV1().Deployments(namespace).Get(ctx, name, metav1.GetOptions{})
	if err != nil {
		log(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Deployment: %v", err))
		return err
	}

	log(fmt.Sprintf("üîß –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º Deployment %s –≤ namespace %s –¥–æ %d —Ä–µ–ø–ª–∏–∫...", name, namespace, replicas))

	dep.Spec.Replicas = &replicas

	_, err = c.clientset.AppsV1().Deployments(namespace).Update(ctx, dep, metav1.UpdateOptions{})
	if err != nil {
		log(fmt.Sprintf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Deployment: %v", err))
		return err
	}

	log("üöÄ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ...")

	// –ñ–¥—ë–º, –ø–æ–∫–∞ Deployment –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–ø–ª–∏–∫
	return wait.PollUntilContextCancel(ctx, 2*time.Second, true, func(ctx context.Context) (bool, error) {
		updated, err := c.clientset.AppsV1().Deployments(namespace).Get(ctx, name, metav1.GetOptions{})
		if err != nil {
			log(fmt.Sprintf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Deployment: %v", err))
			return false, err
		}

		log(fmt.Sprintf(
			"üåÄ –°—Ç–∞—Ç—É—Å: –¥–æ—Å—Ç—É–ø–Ω–æ %d/%d —Ä–µ–ø–ª–∏–∫",
			updated.Status.AvailableReplicas,
			replicas,
		))

		if updated.Status.AvailableReplicas == replicas {
			log("‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
			return true, nil
		}

		return false, nil
	})
}

/*func RollbackDeployment(namespace, name string) error {
	// Kubernetes –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–æ–ª–ª–±–µ–∫ –ø—Ä—è–º–æ —á–µ—Ä–µ–∑ API –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö.
	// –†–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ ReplicaSet –∏ –µ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é.
	// –õ–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `kubectl rollout undo` —á–µ—Ä–µ–∑ exec, –ª–∏–±–æ –∫–∞—Å—Ç–æ–º–Ω–∞—è –ª–æ–≥–∏–∫–∞.
	return nil // –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ—Å–ª–∏ –Ω–∞–¥–æ
}*/

func (c *K8sClient) RollbackDeploymentWithLogs(ctx context.Context, namespace, name string, revision int64, logCh chan<- string) error {
	log := func(msg string) {
		if logCh != nil {
			logCh <- msg
		}
	}

	log("[rollback] –ü–æ–ª—É—á–∞–µ–º deployment...")
	dep, err := c.clientset.AppsV1().Deployments(namespace).Get(ctx, name, metav1.GetOptions{})
	if err != nil {
		log(fmt.Sprintf("[rollback] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è deployment: %v", err))
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è deployment: %v", err)
	}

	log("[rollback] –ü–æ–ª—É—á–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–∑ deployment...")
	selector, err := metav1.LabelSelectorAsSelector(dep.Spec.Selector)
	if err != nil {
		log(fmt.Sprintf("[rollback] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞: %v", err))
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞: %v", err)
	}

	log(fmt.Sprintf("[rollback] –°–µ–ª–µ–∫—Ç–æ—Ä: %s", selector.String()))
	log("[rollback] –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ReplicaSets...")
	rsList, err := c.clientset.AppsV1().ReplicaSets(namespace).List(ctx, metav1.ListOptions{
		LabelSelector: selector.String(),
	})
	if err != nil {
		log(fmt.Sprintf("[rollback] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ ReplicaSets: %v", err))
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ ReplicaSets: %v", err)
	}

	log(fmt.Sprintf("[rollback] –ù–∞–π–¥–µ–Ω–æ ReplicaSets: %d", len(rsList.Items)))
	for i, rs := range rsList.Items {
		log(fmt.Sprintf("[rollback] RS[%d]: %s, —Ä–µ–≤–∏–∑–∏—è: %s, replicas: %d, ready: %d, created: %s", i, rs.Name, rs.Annotations["deployment.kubernetes.io/revision"], rs.Status.Replicas, rs.Status.ReadyReplicas, rs.CreationTimestamp.Time.Format(time.RFC3339)))
	}

	sort.Slice(rsList.Items, func(i, j int) bool {
		return rsList.Items[i].CreationTimestamp.After(rsList.Items[j].CreationTimestamp.Time)
	})

	if len(rsList.Items) < 2 {
		log("[rollback] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–≤–∏–∑–∏–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2)")
		return fmt.Errorf("–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–≤–∏–∑–∏–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2)")
	}

	curRevStr, ok := dep.Annotations["deployment.kubernetes.io/revision"]
	if !ok {
		log("[rollback] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ä–µ–≤–∏–∑–∏—é deployment")
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ä–µ–≤–∏–∑–∏—é deployment")
	}
	curRev, err := strconv.ParseInt(curRevStr, 10, 64)
	if err != nil {
		log("[rollback] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ä–µ–≤–∏–∑–∏—é deployment")
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ä–µ–≤–∏–∑–∏—é deployment")
	}

	var targetRS *appsv1.ReplicaSet
	if revision > 0 {
		for _, rs := range rsList.Items {
			if rsRev, ok := rs.Annotations["deployment.kubernetes.io/revision"]; ok {
				if rsRev == fmt.Sprintf("%d", revision) {
					targetRS = &rs
					break
				}
			}
		}
		if targetRS == nil {
			log(fmt.Sprintf("[rollback] –†–µ–≤–∏–∑–∏—è %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", revision))
			return fmt.Errorf("—Ä–µ–≤–∏–∑–∏—è %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", revision)
		}
		log(fmt.Sprintf("[rollback] –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è —Ä–µ–≤–∏–∑–∏—è: %s (—Ä–µ–ø–ª–∏–∫–∏: %d)", targetRS.Name, targetRS.Status.Replicas))
	} else {
		targetRevision := curRev - 1
		for _, rs := range rsList.Items {
			if rsRev, ok := rs.Annotations["deployment.kubernetes.io/revision"]; ok {
				rsRevInt, _ := strconv.ParseInt(rsRev, 10, 64)
				if rsRevInt == targetRevision {
					targetRS = &rs
					break
				}
			}
		}
		if targetRS == nil {
			log(fmt.Sprintf("[rollback] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–µ–≤–∏–∑–∏—è %d", targetRevision))
			return fmt.Errorf("–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–µ–≤–∏–∑–∏—è %d", targetRevision)
		}
		log(fmt.Sprintf("[rollback] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ä–µ–≤–∏–∑–∏—é: %s (—Ä–µ–ø–ª–∏–∫–∏: %d)", targetRS.Name, targetRS.Status.Replicas))
	}

	log("[rollback] –û–±–Ω–æ–≤–ª—è–µ–º deployment —Å —à–∞–±–ª–æ–Ω–æ–º –ø–æ–¥–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ ReplicaSet...")

	// --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø–æ–≤—Ç–æ—Ä—è–µ–º Update –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ ---
	for attempt := 0; attempt < 5; attempt++ {
		// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π deployment
		dep, err = c.clientset.AppsV1().Deployments(namespace).Get(ctx, name, metav1.GetOptions{})
		if err != nil {
			log(fmt.Sprintf("[rollback] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è deployment –ø–µ—Ä–µ–¥ Update: %v", err))
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è deployment –ø–µ—Ä–µ–¥ Update: %v", err)
		}
		dep.Spec.Template = targetRS.Spec.Template
		_, err = c.clientset.AppsV1().Deployments(namespace).Update(ctx, dep, metav1.UpdateOptions{})
		if err == nil {
			break
		}
		if strings.Contains(err.Error(), "the object has been modified") {
			log("[rollback] –ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤–µ—Ä—Å–∏–π deployment, –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑...")
			time.Sleep(1 * time.Second)
			continue
		}
		log(fmt.Sprintf("[rollback] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è deployment: %v", err))
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è deployment: %v", err)
	}

	log("[rollback] –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–∫–∞—Ç–∞...")
	err = wait.PollUntilContextCancel(ctx, 2*time.Second, true, func(ctx context.Context) (bool, error) {
		dep, err := c.clientset.AppsV1().Deployments(namespace).Get(ctx, name, metav1.GetOptions{})
		if err != nil {
			log(fmt.Sprintf("[rollback] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è deployment: %v", err))
			return false, err
		}

		ready := dep.Status.AvailableReplicas == *dep.Spec.Replicas &&
			dep.Status.UpdatedReplicas == *dep.Spec.Replicas &&
			dep.Status.Replicas == *dep.Spec.Replicas &&
			dep.Status.UnavailableReplicas == 0

		log(fmt.Sprintf("[rollback] –°—Ç–∞—Ç—É—Å: –¥–æ—Å—Ç—É–ø–Ω–æ %d/%d, –æ–±–Ω–æ–≤–ª–µ–Ω–æ: %d, –≤—Å–µ–≥–æ: %d, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: %d", dep.Status.AvailableReplicas, *dep.Spec.Replicas, dep.Status.UpdatedReplicas, dep.Status.Replicas, dep.Status.UnavailableReplicas))

		return ready, nil
	})

	if err != nil {
		log(fmt.Sprintf("[rollback] –û–®–ò–ë–ö–ê –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–∫–∞—Ç–∞: %v", err))
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–∫–∞—Ç–∞: %v", err)
	}

	log("[rollback] –û—Ç–∫–∞—Ç deployment —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
	return nil
}

func (c *K8sClient) RestartDeploymentWithLogs(ctx context.Context, namespace, name string, logCh chan<- string) error {
	if c.clientset == nil {
		return fmt.Errorf("client not initialized")
	}

	log := func(msg string) {
		if logCh != nil {
			logCh <- msg
		}
	}

	dep, err := c.clientset.AppsV1().Deployments(namespace).Get(ctx, name, metav1.GetOptions{})
	if err != nil {
		log(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Deployment: %v", err))
		return err
	}

	if dep.Spec.Template.Annotations == nil {
		dep.Spec.Template.Annotations = map[string]string{}
	}

	dep.Spec.Template.Annotations["kubectl.kubernetes.io/restartedAt"] = time.Now().Format(time.RFC3339Nano)

	_, err = c.clientset.AppsV1().Deployments(namespace).Update(ctx, dep, metav1.UpdateOptions{})
	if err != nil {
		log(fmt.Sprintf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Deployment: %v", err))
		return err
	}

	log("üöÄ Rollout restart –∑–∞–ø—É—â–µ–Ω...")

	return wait.PollUntilContextCancel(ctx, 2*time.Second, true, func(ctx context.Context) (bool, error) {
		updated, err := c.clientset.AppsV1().Deployments(namespace).Get(ctx, name, metav1.GetOptions{})
		if err != nil {
			log(fmt.Sprintf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Deployment: %v", err))
			return false, err
		}

		ready := updated.Generation <= updated.Status.ObservedGeneration &&
			updated.Status.UpdatedReplicas == *updated.Spec.Replicas &&
			updated.Status.AvailableReplicas == *updated.Spec.Replicas &&
			updated.Status.UnavailableReplicas == 0

		log(fmt.Sprintf(
			"üåÄ –ü—Ä–æ–≥—Ä–µ—Å—Å: –æ–±–Ω–æ–≤–ª–µ–Ω–æ %d/%d, –≥–æ—Ç–æ–≤–æ %d",
			updated.Status.UpdatedReplicas,
			*updated.Spec.Replicas,
			updated.Status.AvailableReplicas,
		))

		if ready {
			log("‚úÖ Rollout –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ.")
			return true, nil
		}

		return false, nil
	})
}

// GetClientset –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç kubernetes
func (c *K8sClient) GetClientset() kubernetes.Interface {
	return c.clientset
}

// ListAvailableRevisions –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–≤–∏–∑–∏–π (ReplicaSet) –¥–ª—è –æ—Ç–∫–∞—Ç–∞ Deployment
func (c *K8sClient) ListAvailableRevisions(ctx context.Context, namespace, deploymentName string) ([]RevisionInfo, error) {
	dep, err := c.GetClientset().AppsV1().Deployments(namespace).Get(ctx, deploymentName, metav1.GetOptions{})
	if err != nil {
		return nil, err
	}
	selector, err := metav1.LabelSelectorAsSelector(dep.Spec.Selector)
	if err != nil {
		return nil, err
	}
	rsList, err := c.GetClientset().AppsV1().ReplicaSets(namespace).List(ctx, metav1.ListOptions{
		LabelSelector: selector.String(),
	})
	if err != nil {
		return nil, err
	}

	var revisions []RevisionInfo
	for _, rs := range rsList.Items {
		revStr := rs.Annotations["deployment.kubernetes.io/revision"]
		if revStr == "" {
			continue
		}
		var rev int64
		fmt.Sscanf(revStr, "%d", &rev)
		image := ""
		if len(rs.Spec.Template.Spec.Containers) > 0 {
			image = rs.Spec.Template.Spec.Containers[0].Image
		}
		revisions = append(revisions, RevisionInfo{
			Revision: rev,
			RSName:   rs.Name,
			Image:    image,
		})
	}
	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–≤–∏–∑–∏–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
	sort.Slice(revisions, func(i, j int) bool {
		return revisions[i].Revision < revisions[j].Revision
	})
	return revisions, nil
}

// GetPodLogs –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–∏ –ø–æ–¥–∞
func (c *K8sClient) GetPodLogs(ctx context.Context, namespace, podName string, opts *PodLogsOptions) (string, error) {
	if c.clientset == nil {
		return "", fmt.Errorf("client not initialized")
	}

	podLogOptions := &corev1.PodLogOptions{}
	if opts != nil {
		podLogOptions.Previous = opts.Previous
		podLogOptions.TailLines = &opts.TailLines
		podLogOptions.SinceSeconds = &opts.SinceSeconds
		podLogOptions.Timestamps = opts.Timestamps
	}

	logs, err := c.clientset.CoreV1().Pods(namespace).GetLogs(podName, podLogOptions).DoRaw(ctx)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –ø–æ–¥–∞ %s: %v", podName, err)
	}

	return string(logs), nil
}
