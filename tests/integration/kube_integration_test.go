//go:build integration_kube
// +build integration_kube

package integration

import (
	"context"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/wait"

	k8sclient "chatops/internal/kube"
)

const (
	testNamespace      = "test-integration"
	testDeploymentName = "test-deployment"
)

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞ int64
func int64Ptr(i int64) *int64 {
	return &i
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞ int32
func int32Ptr(i int32) *int32 {
	return &i
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –ø–æ–¥–∞
func getPodLogs(client *k8sclient.K8sClient, namespace, podName string) (string, error) {
	req := client.GetClientset().CoreV1().Pods(namespace).GetLogs(podName, &corev1.PodLogOptions{
		Previous:  false,
		TailLines: int64Ptr(10),
	})
	logs, err := req.DoRaw(context.TODO())
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –ø–æ–¥–∞ %s: %v", podName, err)
	}
	return string(logs), nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ ReplicaSet'–∞—Ö
func getReplicaSetsInfo(client *k8sclient.K8sClient, namespace, deploymentName string) (string, error) {
	// –ü–æ–ª—É—á–∞–µ–º deployment –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
	dep, err := client.GetClientset().AppsV1().Deployments(namespace).Get(context.TODO(), deploymentName, metav1.GetOptions{})
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è deployment: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–∑ deployment
	selector, err := metav1.LabelSelectorAsSelector(dep.Spec.Selector)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞: %v", err)
	}

	rsList, err := client.GetClientset().AppsV1().ReplicaSets(namespace).List(context.TODO(), metav1.ListOptions{
		LabelSelector: selector.String(),
	})
	if err != nil {
		return "", err
	}

	var info strings.Builder
	info.WriteString("üìä ReplicaSets:\n")
	for _, rs := range rsList.Items {
		info.WriteString(fmt.Sprintf("  - %s: desired=%d, current=%d, ready=%d, age=%s\n",
			rs.Name,
			*rs.Spec.Replicas,
			rs.Status.Replicas,
			rs.Status.ReadyReplicas,
			time.Since(rs.CreationTimestamp.Time).Round(time.Second)))
	}
	return info.String(), nil
}

func TestIntegration(t *testing.T) {
	if testing.Short() {
		t.Skip("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤ —Ä–µ–∂–∏–º–µ short")
	}

	ctx := context.Background()
	fmt.Println("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç...")

	kubeconfig := os.Getenv("KUBECONFIG")
	if kubeconfig == "" {
		home, err := os.UserHomeDir()
		if err != nil {
			t.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %v", err)
		}
		kubeconfig = filepath.Join(home, ".kube", "config")
	}
	fmt.Printf("üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º kubeconfig: %s\n", kubeconfig)

	client, err := k8sclient.InitClientFromKubeconfig(kubeconfig)
	assert.NoError(t, err)
	fmt.Println("‚úÖ –ö–ª–∏–µ–Ω—Ç Kubernetes –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥—ã –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
	fmt.Println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥—ã –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ...")
	pods, err := client.GetClientset().CoreV1().Pods("").List(context.TODO(), metav1.ListOptions{})
	assert.NoError(t, err)
	fmt.Printf("üìä –í—Å–µ–≥–æ –ø–æ–¥–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ: %d\n", len(pods.Items))
	for _, pod := range pods.Items {
		fmt.Printf("  - %s/%s: %s\n", pod.Namespace, pod.Name, pod.Status.Phase)
	}

	// –£–¥–∞–ª—è–µ–º namespace test-integration, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	fmt.Println("üóëÔ∏è  –£–¥–∞–ª—è–µ–º namespace test-integration, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç...")
	err = client.GetClientset().CoreV1().Namespaces().Delete(context.TODO(), "test-integration", metav1.DeleteOptions{})
	if err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è namespace: %v\n", err)
	}

	// –ñ–¥–µ–º —É–¥–∞–ª–µ–Ω–∏—è namespace
	fmt.Println("‚è≥ –ñ–¥–µ–º —É–¥–∞–ª–µ–Ω–∏—è namespace...")
	err = wait.PollImmediate(2*time.Second, 1*time.Minute, func() (bool, error) {
		_, err := client.GetClientset().CoreV1().Namespaces().Get(context.TODO(), "test-integration", metav1.GetOptions{})
		if err != nil {
			return true, nil
		}
		return false, nil
	})
	assert.NoError(t, err)
	fmt.Println("‚úÖ Namespace —É–¥–∞–ª–µ–Ω")

	// –°–æ–∑–¥–∞–µ–º namespace test-integration
	fmt.Println("üì¶ –°–æ–∑–¥–∞–µ–º namespace test-integration...")
	_, err = client.GetClientset().CoreV1().Namespaces().Create(context.TODO(), &corev1.Namespace{
		ObjectMeta: metav1.ObjectMeta{
			Name: "test-integration",
		},
	}, metav1.CreateOptions{})
	assert.NoError(t, err)
	fmt.Println("‚úÖ Namespace —Å–æ–∑–¥–∞–Ω")

	defer func() {
		fmt.Printf("üßπ –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º namespace %s...\n", testNamespace)
		_ = client.GetClientset().CoreV1().Namespaces().Delete(context.TODO(), testNamespace, metav1.DeleteOptions{})
	}()

	// –°–æ–∑–¥–∞–µ–º deployment test-deployment
	fmt.Println("üì¶ –°–æ–∑–¥–∞–µ–º deployment test-deployment...")
	deployment := &appsv1.Deployment{
		ObjectMeta: metav1.ObjectMeta{
			Name: "test-deployment",
			Annotations: map[string]string{
				"deployment.kubernetes.io/revision": "1",
			},
		},
		Spec: appsv1.DeploymentSpec{
			Replicas: int32Ptr(2),
			Selector: &metav1.LabelSelector{
				MatchLabels: map[string]string{
					"app": "test",
				},
			},
			Template: corev1.PodTemplateSpec{
				ObjectMeta: metav1.ObjectMeta{
					Labels: map[string]string{
						"app": "test",
					},
				},
				Spec: corev1.PodSpec{
					Containers: []corev1.Container{
						{
							Name:  "nginx",
							Image: "nginx:1.19",
							Ports: []corev1.ContainerPort{
								{
									ContainerPort: 80,
								},
							},
						},
					},
				},
			},
		},
	}
	_, err = client.GetClientset().AppsV1().Deployments("test-integration").Create(context.TODO(), deployment, metav1.CreateOptions{})
	assert.NoError(t, err)
	fmt.Println("‚úÖ Deployment —Å–æ–∑–¥–∞–Ω")

	// –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ deployment
	fmt.Println("‚è≥ –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ deployment...")
	err = waitForDeploymentReady(client, "test-integration", "test-deployment")
	assert.NoError(t, err)
	fmt.Println("‚úÖ Deployment –≥–æ—Ç–æ–≤")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—ã
	fmt.Println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—ã...")
	pods, err = client.GetClientset().CoreV1().Pods("test-integration").List(context.TODO(), metav1.ListOptions{
		LabelSelector: "app=test",
	})
	assert.NoError(t, err)
	assert.Equal(t, 2, len(pods.Items))
	for _, pod := range pods.Items {
		assert.Equal(t, corev1.PodRunning, pod.Status.Phase)
		fmt.Printf("  - %s: %s\n", pod.Name, pod.Status.Phase)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º ReplicaSets
	fmt.Println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ReplicaSets...")
	rsInfo, err := getReplicaSetsInfo(client, "test-integration", "test-deployment")
	assert.NoError(t, err)
	fmt.Println(rsInfo)

	// –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º deployment –¥–æ 3 —Ä–µ–ø–ª–∏–∫
	fmt.Println("üìà –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º deployment –¥–æ 3 —Ä–µ–ø–ª–∏–∫...")
	logCh := make(chan string, 100)
	go func() {
		for msg := range logCh {
			fmt.Println(msg)
		}
	}()
	err = client.ScaleDeploymentWithLogs(ctx, "test-integration", "test-deployment", 3, logCh)
	assert.NoError(t, err)
	close(logCh)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—ã –ø–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
	fmt.Println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—ã –ø–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è...")
	pods, err = client.GetClientset().CoreV1().Pods("test-integration").List(context.TODO(), metav1.ListOptions{
		LabelSelector: "app=test",
	})
	assert.NoError(t, err)
	assert.Equal(t, 3, len(pods.Items))
	for _, pod := range pods.Items {
		assert.Equal(t, corev1.PodRunning, pod.Status.Phase)
		fmt.Printf("  - %s: %s\n", pod.Name, pod.Status.Phase)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–∑ –≤ deployment
	fmt.Println("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–∑ –≤ deployment...")
	deployment, err = client.GetClientset().AppsV1().Deployments("test-integration").Get(context.TODO(), "test-deployment", metav1.GetOptions{})
	assert.NoError(t, err)
	deployment.Spec.Template.Spec.Containers[0].Image = "nginx:1.20"
	_, err = client.GetClientset().AppsV1().Deployments("test-integration").Update(context.TODO(), deployment, metav1.UpdateOptions{})
	assert.NoError(t, err)

	// –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è deployment
	fmt.Println("‚è≥ –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è deployment...")
	err = waitForDeploymentReady(client, "test-integration", "test-deployment")
	assert.NoError(t, err)
	fmt.Println("‚úÖ Deployment –æ–±–Ω–æ–≤–ª–µ–Ω")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º ReplicaSets –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	fmt.Println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ReplicaSets –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
	rsInfo, err = getReplicaSetsInfo(client, "test-integration", "test-deployment")
	assert.NoError(t, err)
	fmt.Println(rsInfo)

	// –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
	fmt.Println("‚è™ –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏...")
	logCh = make(chan string, 100)
	go func() {
		for msg := range logCh {
			fmt.Println(msg)
		}
	}()
	err = client.RollbackDeploymentWithLogs(ctx, "test-integration", "test-deployment", 0, logCh)
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ deployment: %v", err)
	}
	close(logCh)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∫–∞—Ç —É—Å–ø–µ—à–µ–Ω
	err = waitForDeploymentReady(client, "test-integration", "test-deployment")
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ deployment –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–∑–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
	dep, err := client.GetClientset().AppsV1().Deployments("test-integration").Get(ctx, "test-deployment", metav1.GetOptions{})
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è deployment –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞: %v", err)
	}
	if dep.Spec.Template.Spec.Containers[0].Image != "nginx:1.19" {
		t.Errorf("–ù–µ–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–∑–∞ –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞: %s", dep.Spec.Template.Spec.Containers[0].Image)
	}

	// –û—Ç–∫–∞—Ç –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–≤–∏–∑–∏–∏
	fmt.Println("‚è™ –û—Ç–∫–∞—Ç –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–≤–∏–∑–∏–∏...")
	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–∫–∞—Ç–æ–º –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–≤–∏–∑–∏–∏
	time.Sleep(5 * time.Second)
	// –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–≤–∏–∑–∏–π
	for i := 0; i < 3; i++ {
		dep, err = client.GetClientset().AppsV1().Deployments("test-integration").Get(ctx, "test-deployment", metav1.GetOptions{})
		if err != nil {
			t.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è deployment: %v", err)
		}
		dep.Spec.Template.Spec.Containers[0].Image = fmt.Sprintf("nginx:1.%d", 22+i)
		_, err = client.GetClientset().AppsV1().Deployments("test-integration").Update(ctx, dep, metav1.UpdateOptions{})
		if err != nil {
			t.Fatalf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è deployment: %v", err)
		}
		time.Sleep(2 * time.Second) // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
	}

	// –û—Ç–∫–∞—Ç –∫ —Ä–µ–≤–∏–∑–∏–∏ 2 (–ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
	logCh = make(chan string, 100)
	go func() {
		for msg := range logCh {
			fmt.Println(msg)
		}
	}()
	err = client.RollbackDeploymentWithLogs(ctx, "test-integration", "test-deployment", 2, logCh)
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–≤–∏–∑–∏–∏: %v", err)
	}
	close(logCh)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∫–∞—Ç —É—Å–ø–µ—à–µ–Ω
	err = waitForDeploymentReady(client, "test-integration", "test-deployment")
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ deployment –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–≤–∏–∑–∏–∏: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–≤–∏–∑–∏–∏
	dep, err = client.GetClientset().AppsV1().Deployments("test-integration").Get(ctx, "test-deployment", metav1.GetOptions{})
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è deployment –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–≤–∏–∑–∏–∏: %v", err)
	}
	if dep.Spec.Template.Spec.Containers[0].Image != "nginx:1.20" {
		t.Errorf("–ù–µ–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–∑–∞ –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–≤–∏–∑–∏–∏: %s", dep.Spec.Template.Spec.Containers[0].Image)
	}

	// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º deployment
	fmt.Println("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º deployment...")
	logCh = make(chan string, 100)
	go func() {
		for msg := range logCh {
			fmt.Println(msg)
		}
	}()
	err = client.RestartDeploymentWithLogs(ctx, "test-integration", "test-deployment", logCh)
	assert.NoError(t, err)
	close(logCh)

	// –ñ–¥–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ deployment
	fmt.Println("‚è≥ –ñ–¥–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ deployment...")
	err = waitForDeploymentReady(client, "test-integration", "test-deployment")
	assert.NoError(t, err)
	fmt.Println("‚úÖ Deployment –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º ReplicaSets –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
	fmt.Println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ReplicaSets –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...")
	rsInfo, err = getReplicaSetsInfo(client, "test-integration", "test-deployment")
	assert.NoError(t, err)
	fmt.Println(rsInfo)

	// –£–¥–∞–ª—è–µ–º namespace test-integration
	fmt.Println("üóëÔ∏è  –£–¥–∞–ª—è–µ–º namespace test-integration...")
	err = client.GetClientset().CoreV1().Namespaces().Delete(context.TODO(), "test-integration", metav1.DeleteOptions{})
	assert.NoError(t, err)
	fmt.Println("‚úÖ Namespace —É–¥–∞–ª–µ–Ω")

	fmt.Println("üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
}

func TestIntegrationRollbackAllRevisions(t *testing.T) {
	if testing.Short() {
		t.Skip("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤ —Ä–µ–∂–∏–º–µ short")
	}

	ctx := context.Background()
	fmt.Println("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ—Ç–∫–∞—Ç–∞ –Ω–∞ –≤—Å–µ —Ä–µ–≤–∏–∑–∏–∏...")

	kubeconfig := os.Getenv("KUBECONFIG")
	if kubeconfig == "" {
		home, err := os.UserHomeDir()
		if err != nil {
			t.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %v", err)
		}
		kubeconfig = filepath.Join(home, ".kube", "config")
	}
	fmt.Printf("üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º kubeconfig: %s\n", kubeconfig)

	client, err := k8sclient.InitClientFromKubeconfig(kubeconfig)
	assert.NoError(t, err)
	fmt.Println("‚úÖ –ö–ª–∏–µ–Ω—Ç Kubernetes –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	// –£–¥–∞–ª—è–µ–º namespace test-integration, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	fmt.Println("üóëÔ∏è  –£–¥–∞–ª—è–µ–º namespace test-integration, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç...")
	err = client.GetClientset().CoreV1().Namespaces().Delete(context.TODO(), "test-integration", metav1.DeleteOptions{})
	if err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è namespace: %v\n", err)
	}

	// –ñ–¥–µ–º —É–¥–∞–ª–µ–Ω–∏—è namespace
	fmt.Println("‚è≥ –ñ–¥–µ–º —É–¥–∞–ª–µ–Ω–∏—è namespace...")
	err = wait.PollImmediate(2*time.Second, 1*time.Minute, func() (bool, error) {
		_, err := client.GetClientset().CoreV1().Namespaces().Get(context.TODO(), "test-integration", metav1.GetOptions{})
		if err != nil {
			return true, nil
		}
		return false, nil
	})
	assert.NoError(t, err)
	fmt.Println("‚úÖ Namespace —É–¥–∞–ª–µ–Ω")

	// –°–æ–∑–¥–∞–µ–º namespace test-integration
	fmt.Println("üì¶ –°–æ–∑–¥–∞–µ–º namespace test-integration...")
	_, err = client.GetClientset().CoreV1().Namespaces().Create(context.TODO(), &corev1.Namespace{
		ObjectMeta: metav1.ObjectMeta{
			Name: "test-integration",
		},
	}, metav1.CreateOptions{})
	assert.NoError(t, err)
	fmt.Println("‚úÖ Namespace —Å–æ–∑–¥–∞–Ω")

	defer func() {
		fmt.Printf("üßπ –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º namespace %s...\n", "test-integration")
		_ = client.GetClientset().CoreV1().Namespaces().Delete(context.TODO(), "test-integration", metav1.DeleteOptions{})
	}()

	// –°–æ–∑–¥–∞–µ–º deployment test-deployment
	fmt.Println("üì¶ –°–æ–∑–¥–∞–µ–º deployment test-deployment...")
	deployment := &appsv1.Deployment{
		ObjectMeta: metav1.ObjectMeta{
			Name: "test-deployment",
			Annotations: map[string]string{
				"deployment.kubernetes.io/revision": "1",
			},
		},
		Spec: appsv1.DeploymentSpec{
			Replicas: int32Ptr(2),
			Selector: &metav1.LabelSelector{
				MatchLabels: map[string]string{
					"app": "test",
				},
			},
			Template: corev1.PodTemplateSpec{
				ObjectMeta: metav1.ObjectMeta{
					Labels: map[string]string{
						"app": "test",
					},
				},
				Spec: corev1.PodSpec{
					Containers: []corev1.Container{
						{
							Name:  "nginx",
							Image: "nginx:1.19",
							Ports: []corev1.ContainerPort{
								{
									ContainerPort: 80,
								},
							},
						},
					},
				},
			},
		},
	}
	_, err = client.GetClientset().AppsV1().Deployments("test-integration").Create(context.TODO(), deployment, metav1.CreateOptions{})
	assert.NoError(t, err)
	fmt.Println("‚úÖ Deployment —Å–æ–∑–¥–∞–Ω")

	// –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ deployment
	fmt.Println("‚è≥ –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ deployment...")
	err = waitForDeploymentReady(client, "test-integration", "test-deployment")
	assert.NoError(t, err)
	fmt.Println("‚úÖ Deployment –≥–æ—Ç–æ–≤")

	// –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≤–∏–∑–∏–π, –æ–±–Ω–æ–≤–ª—è—è –æ–±—Ä–∞–∑
	images := []string{"nginx:1.20", "nginx:1.21", "nginx:1.22"}
	for _, image := range images {
		fmt.Printf("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–∑ –Ω–∞ %s...\n", image)
		for i := 0; i < 5; i++ { // –ü—Ä–æ–±—É–µ–º –¥–æ 5 —Ä–∞–∑
			dep, err := client.GetClientset().AppsV1().Deployments("test-integration").Get(ctx, "test-deployment", metav1.GetOptions{})
			assert.NoError(t, err)
			dep.Spec.Template.Spec.Containers[0].Image = image
			_, err = client.GetClientset().AppsV1().Deployments("test-integration").Update(ctx, dep, metav1.UpdateOptions{})
			if err == nil {
				break
			}
			if i < 4 { // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
				fmt.Printf("‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ %d –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...\n", i+1)
				time.Sleep(time.Second) // –ñ–¥–µ–º —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
				continue
			}
			assert.NoError(t, err) // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –≤—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π
		}
		err = waitForDeploymentReady(client, "test-integration", "test-deployment")
		assert.NoError(t, err)
		fmt.Printf("‚úÖ –û–±—Ä–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ %s\n", image)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≤–∏–∑–∏–π
	fmt.Println("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≤–∏–∑–∏–π...")
	revisions, err := client.ListAvailableRevisions(ctx, "test-integration", "test-deployment")
	assert.NoError(t, err)
	fmt.Printf("üìä –ù–∞–π–¥–µ–Ω–æ %d —Ä–µ–≤–∏–∑–∏–π\n", len(revisions))

	// –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–∞—Ç–∏—Ç—å—Å—è –Ω–∞ –∫–∞–∂–¥—É—é —Ä–µ–≤–∏–∑–∏—é
	for _, rev := range revisions {
		fmt.Printf("‚è™ –û—Ç–∫–∞—Ç –∫ —Ä–µ–≤–∏–∑–∏–∏ %d (RS: %s, Image: %s)...\n", rev.Revision, rev.RSName, rev.Image)
		logCh := make(chan string, 100)
		done := make(chan struct{})
		go func() {
			for msg := range logCh {
				fmt.Println(msg)
			}
			close(done)
		}()

		err := client.RollbackDeploymentWithLogs(ctx, "test-integration", "test-deployment", rev.Revision, logCh)
		assert.NoError(t, err)
		close(logCh)
		<-done

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∫–∞—Ç —É—Å–ø–µ—à–µ–Ω
		err = waitForDeploymentReady(client, "test-integration", "test-deployment")
		assert.NoError(t, err)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–≤–∏–∑–∏–∏
		dep, err := client.GetClientset().AppsV1().Deployments("test-integration").Get(ctx, "test-deployment", metav1.GetOptions{})
		assert.NoError(t, err)
		assert.Equal(t, rev.Image, dep.Spec.Template.Spec.Containers[0].Image)
		fmt.Printf("‚úÖ –û—Ç–∫–∞—Ç –∫ —Ä–µ–≤–∏–∑–∏–∏ %d —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω\n", rev.Revision)
	}

	fmt.Println("üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ—Ç–∫–∞—Ç–∞ –Ω–∞ –≤—Å–µ —Ä–µ–≤–∏–∑–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ deployment
func waitForDeploymentReady(client *k8sclient.K8sClient, namespace, name string) error {
	ctx := context.Background()
	return wait.PollUntilContextCancel(ctx, 2*time.Second, true, func(ctx context.Context) (bool, error) {
		dep, err := client.GetClientset().AppsV1().Deployments(namespace).Get(ctx, name, metav1.GetOptions{})
		if err != nil {
			return false, err
		}

		ready := dep.Status.AvailableReplicas == *dep.Spec.Replicas &&
			dep.Status.UpdatedReplicas == *dep.Spec.Replicas &&
			dep.Status.Replicas == *dep.Spec.Replicas &&
			dep.Status.UnavailableReplicas == 0

		if !ready {
			fmt.Printf("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: –¥–æ—Å—Ç—É–ø–Ω–æ %d/%d —Ä–µ–ø–ª–∏–∫ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: %d, –≤—Å–µ–≥–æ: %d, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: %d)\n",
				dep.Status.AvailableReplicas, *dep.Spec.Replicas,
				dep.Status.UpdatedReplicas, dep.Status.Replicas,
				dep.Status.UnavailableReplicas)
		}

		return ready, nil
	})
}

func TestIntegrationGetPodLogs(t *testing.T) {
	if testing.Short() {
		t.Skip("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤ —Ä–µ–∂–∏–º–µ short")
	}

	ctx := context.Background()
	fmt.Println("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤...")

	kubeconfig := os.Getenv("KUBECONFIG")
	if kubeconfig == "" {
		home, err := os.UserHomeDir()
		if err != nil {
			t.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %v", err)
		}
		kubeconfig = filepath.Join(home, ".kube", "config")
	}
	fmt.Printf("üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º kubeconfig: %s\n", kubeconfig)

	client, err := k8sclient.InitClientFromKubeconfig(kubeconfig)
	assert.NoError(t, err)
	fmt.Println("‚úÖ –ö–ª–∏–µ–Ω—Ç Kubernetes –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	// –£–¥–∞–ª—è–µ–º namespace test-integration, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	fmt.Println("üóëÔ∏è  –£–¥–∞–ª—è–µ–º namespace test-integration, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç...")
	err = client.GetClientset().CoreV1().Namespaces().Delete(context.TODO(), "test-integration", metav1.DeleteOptions{})
	if err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è namespace: %v\n", err)
	}

	// –ñ–¥–µ–º —É–¥–∞–ª–µ–Ω–∏—è namespace
	fmt.Println("‚è≥ –ñ–¥–µ–º —É–¥–∞–ª–µ–Ω–∏—è namespace...")
	err = wait.PollImmediate(2*time.Second, 1*time.Minute, func() (bool, error) {
		_, err := client.GetClientset().CoreV1().Namespaces().Get(context.TODO(), "test-integration", metav1.GetOptions{})
		if err != nil {
			return true, nil
		}
		return false, nil
	})
	assert.NoError(t, err)
	fmt.Println("‚úÖ Namespace —É–¥–∞–ª–µ–Ω")

	// –°–æ–∑–¥–∞–µ–º namespace test-integration
	fmt.Println("üì¶ –°–æ–∑–¥–∞–µ–º namespace test-integration...")
	_, err = client.GetClientset().CoreV1().Namespaces().Create(context.TODO(), &corev1.Namespace{
		ObjectMeta: metav1.ObjectMeta{
			Name: "test-integration",
		},
	}, metav1.CreateOptions{})
	assert.NoError(t, err)
	fmt.Println("‚úÖ Namespace —Å–æ–∑–¥–∞–Ω")

	defer func() {
		fmt.Printf("üßπ –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º namespace %s...\n", "test-integration")
		_ = client.GetClientset().CoreV1().Namespaces().Delete(context.TODO(), "test-integration", metav1.DeleteOptions{})
	}()

	// –°–æ–∑–¥–∞–µ–º –ø–æ–¥ —Å nginx
	fmt.Println("üì¶ –°–æ–∑–¥–∞–µ–º –ø–æ–¥ —Å nginx...")
	pod := &corev1.Pod{
		ObjectMeta: metav1.ObjectMeta{
			Name:      "test-nginx-pod",
			Namespace: "test-integration",
		},
		Spec: corev1.PodSpec{
			Containers: []corev1.Container{
				{
					Name:  "nginx",
					Image: "nginx:latest",
					Ports: []corev1.ContainerPort{
						{
							ContainerPort: 80,
						},
					},
				},
			},
		},
	}

	_, err = client.GetClientset().CoreV1().Pods("test-integration").Create(context.TODO(), pod, metav1.CreateOptions{})
	assert.NoError(t, err)
	fmt.Println("‚úÖ –ü–æ–¥ —Å–æ–∑–¥–∞–Ω")

	// –ñ–¥–µ–º, –ø–æ–∫–∞ –ø–æ–¥ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
	fmt.Println("‚è≥ –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–∞...")
	err = wait.PollImmediate(2*time.Second, 2*time.Minute, func() (bool, error) {
		pod, err := client.GetClientset().CoreV1().Pods("test-integration").Get(context.TODO(), "test-nginx-pod", metav1.GetOptions{})
		if err != nil {
			return false, err
		}
		return pod.Status.Phase == corev1.PodRunning, nil
	})
	assert.NoError(t, err)
	fmt.Println("‚úÖ –ü–æ–¥ –≥–æ—Ç–æ–≤")

	// –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –ø–æ–¥–∞
	fmt.Println("üìã –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –ø–æ–¥–∞...")
	logs, err := client.GetPodLogs(ctx, "test-integration", "test-nginx-pod", &k8sclient.PodLogsOptions{
		TailLines:    10,
		SinceSeconds: 3600,
		Timestamps:   true,
	})
	assert.NoError(t, err)
	assert.NotEmpty(t, logs)
	fmt.Printf("üìù –ü–æ–ª—É—á–µ–Ω—ã –ª–æ–≥–∏ –ø–æ–¥–∞:\n%s\n", logs)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç—Ä–æ–∫–∏
	assert.Contains(t, logs, "nginx")
	assert.Contains(t, logs, "worker process")

	fmt.Println("üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
}
